my-app/
│
├── assets/                   # Recursos estáticos como imágenes, fuentes, etc.
│   ├── images/
│   ├── fonts/
│
├── components/              # Componentes reutilizables de UI
│   ├── Button/
│   │   ├── Button.js
│   │   ├── Button.styles.js
│   │   └── index.js
│   └── Header/
│       ├── Header.js
│       ├── Header.styles.js
│       └── index.js
│
├── constants/               # Archivos de constantes y configuraciones
│   ├── Colors.js
│   └── Strings.js
│
├── hooks/                   # Custom hooks
│   └── useAuth.js
│
├── navigation/              # Configuración y archivos de navegación
│   ├── AppNavigator.js
│   └── screens/             # Pantallas relacionadas con la navegación
│       ├── HomeScreen.js
│       └── ProfileScreen.js
│
├── screens/                 # Pantallas principales de la aplicación
│   ├── HomeScreen.js
│   └── ProfileScreen.js
│
├── services/                # Servicios y llamadas a la API
│   ├── api.js
│   └── authService.js
│
├── store/                   # Gestión del estado (Redux, Zustand, etc.)
│   ├── actions/
│   ├── reducers/
│   └── store.js
│
├── styles/                  # Estilos globales
│   ├── globalStyles.js
│   └── theme.js
│
├── utils/                   # Funciones y utilidades generales
│   └── helpers.js
│
├── App.js                   # Archivo principal de la aplicación
├── app.json                 # Configuración de Expo
├── babel.config.js          # Configuración de Babel
├── package.json             # Dependencias y scripts del proyecto
└── README.md                # Documentación del proyecto
// navigation/AppNavigator.js
import React, { useState, useEffect } from 'react';
import {createBottomTabNavigator} from "@react-navigation/bottom-tabs";
import { createStackNavigator } from '@react-navigation/stack';
import { NavigationContainer } from '@react-navigation/native';
import SplashScreen from '../screens/SplashScreen';
import LoginScreen from '../screens/LoginScreen';
import HomeScreen from '../screens/HomeScreen'; // Asegúrate de que HomeScreen está correctamente importado
import AsyncStorage from '@react-native-async-storage/async-storage';

const Stack = createStackNavigator();
const Tab = createBottomTabNavigator();

export default function AppNavigator() {
  const [isAuthenticated, setIsAuthenticated] = useState(null);

  useEffect(() => {
    const checkAuth = async () => {
      try {
        const token = await AsyncStorage.getItem('userToken');
        setIsAuthenticated(!!token); // Si hay un token, el usuario está autenticado
      } catch (error) {
        console.error('Error al verificar el estado de autenticación:', error);
        setIsAuthenticated(false);
      }
    };

    checkAuth();
  }, []);

  // Mientras se verifica el estado de autenticación, mostrar el SplashScreen
  if (isAuthenticated === null) {
    return <SplashScreen />;
  }

  return (
      <Tab.Navigator>
        <Tab.Screen name="Home" component={HomeScreen} />
      </Tab.Navigator>
  );
}






// App.js
import React, { useContext, useEffect } from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { AppProvider } from './src/context/AppContext';
import AppNavigation from './src/navigation/AppNavigator'; // Nota: Usa export default para AppNavigation
import LoadingScreen from './src/screens/SplashScreen'; // Asegúrate de que esto es una exportación por defecto
import LoginScreen from './src/screens/LoginScreen'; // Asegúrate de que esto es una exportación por defecto
import {  AppContext } from './src/context/AppContext';
export default function App() {
  return (
    <AppProvider>
      <MainApp />
    </AppProvider>
  );
}

function MainApp() {
  const { isLoading, isLoggedIn, setIsLoading, setIsLoggedIn } = useContext(AppContext);

  useEffect(() => {
    // Simular una carga de recursos, puedes reemplazar esto con tu lógica
    setTimeout(() => {
      setIsLoading(false);
    }, 3000); // 3 segundos de carga
  }, []);

  const handleLogin = () => {
    setIsLoggedIn(true);
  };

  if (isLoading) {
    return <LoadingScreen />;
  }

  if (!isLoggedIn) {
    return <LoginScreen onLogin={handleLogin} />; // Asegúrate de que LoginScreen recibe props correctamente
  }

  return (
    <NavigationContainer>
      <AppNavigation />
    </NavigationContainer>
  );
}
